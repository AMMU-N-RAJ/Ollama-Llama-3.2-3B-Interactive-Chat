version: 3
created_by: your_name
task_description: |
  You are a Python programming assistant. Help users write, debug, and improve 
  Python code by providing clear explanations, best practices, and working examples.

seed_examples:
  - question: |
      Write a Python function that takes a list of numbers and returns the 
      average, but excludes any numbers that are more than 2 standard deviations 
      away from the mean.
    answer: |
      Here's a Python function that calculates the average while excluding outliers:

      ```python
      import statistics

      def average_without_outliers(numbers):
          """
          Calculate average excluding numbers more than 2 standard deviations 
          from the mean.
          
          Args:
              numbers (list): List of numeric values
              
          Returns:
              float: Average of non-outlier values, or None if insufficient data
          """
          if len(numbers) < 3:
              # Need at least 3 points to meaningfully detect outliers
              return statistics.mean(numbers) if numbers else None
          
          # Calculate initial mean and standard deviation
          mean = statistics.mean(numbers)
          stdev = statistics.stdev(numbers)
          
          # Filter out outliers (more than 2 standard deviations from mean)
          filtered_numbers = [
              num for num in numbers 
              if abs(num - mean) <= 2 * stdev
          ]
          
          # Return average of filtered data
          return statistics.mean(filtered_numbers) if filtered_numbers else None

      # Example usage
      data = [1, 2, 3, 4, 5, 100, 6, 7, 8]  # 100 is an outlier
      result = average_without_outliers(data)
      print(f"Average without outliers: {result:.2f}")
      ```

      This function:
      1. Handles edge cases (empty lists, insufficient data)
      2. Uses the statistics module for robust calculations
      3. Filters outliers using the 2-sigma rule
      4. Returns the average of the remaining values

  - question: |
      Create a Python class that manages a simple inventory system with methods 
      to add items, remove items, check stock, and get low-stock alerts.
    answer: |
      Here's a comprehensive inventory management class:

      ```python
      from typing import Dict, List, Optional
      from datetime import datetime

      class InventoryManager:
          """
          A simple inventory management system that tracks items and quantities.
          """
          
          def __init__(self, low_stock_threshold: int = 10):
              """
              Initialize the inventory manager.
              
              Args:
                  low_stock_threshold (int): Minimum quantity before low stock alert
              """
              self.inventory: Dict[str, int] = {}
              self.low_stock_threshold = low_stock_threshold
              self.transaction_log: List[Dict] = []
          
          def add_item(self, item_name: str, quantity: int) -> None:
              """Add items to inventory."""
              if quantity <= 0:
                  raise ValueError("Quantity must be positive")
              
              self.inventory[item_name] = self.inventory.get(item_name, 0) + quantity
              self._log_transaction("ADD", item_name, quantity)
              print(f"Added {quantity} units of {item_name}")
          
          def remove_item(self, item_name: str, quantity: int) -> bool:
              """
              Remove items from inventory.
              
              Returns:
                  bool: True if successful, False if insufficient stock
              """
              if quantity <= 0:
                  raise ValueError("Quantity must be positive")
              
              current_stock = self.inventory.get(item_name, 0)
              if current_stock < quantity:
                  print(f"Insufficient stock. Available: {current_stock}, Requested: {quantity}")
                  return False
              
              self.inventory[item_name] = current_stock - quantity
              if self.inventory[item_name] == 0:
                  del self.inventory[item_name]
              
              self._log_transaction("REMOVE", item_name, quantity)
              print(f"Removed {quantity} units of {item_name}")
              return True
          
          def check_stock(self, item_name: str) -> int:
              """Check current stock for an item."""
              return self.inventory.get(item_name, 0)
          
          def get_low_stock_items(self) -> List[str]:
              """Get list of items below the low stock threshold."""
              return [
                  item for item, quantity in self.inventory.items()
                  if quantity <= self.low_stock_threshold
              ]
          
          def display_inventory(self) -> None:
              """Display current inventory status."""
              if not self.inventory:
                  print("Inventory is empty")
                  return
              
              print("\n--- Current Inventory ---")
              for item, quantity in sorted(self.inventory.items()):
                  status = " (LOW STOCK)" if quantity <= self.low_stock_threshold else ""
                  print(f"{item}: {quantity}{status}")
          
          def _log_transaction(self, action: str, item: str, quantity: int) -> None:
              """Log inventory transactions."""
              self.transaction_log.append({
                  "timestamp": datetime.now(),
                  "action": action,
                  "item": item,
                  "quantity": quantity
              })

      # Example usage
      inventory = InventoryManager(low_stock_threshold=5)

      # Add items
      inventory.add_item("Laptops", 25)
      inventory.add_item("Mice", 50)
      inventory.add_item("Keyboards", 3)

      # Check and display
      inventory.display_inventory()
      print(f"Low stock items: {inventory.get_low_stock_items()}")

      # Remove items
      inventory.remove_item("Laptops", 20)
      inventory.display_inventory()
      ```

      This inventory system provides:
      - Type hints for better code documentation
      - Error handling for invalid quantities
      - Transaction logging for audit trails
      - Flexible low-stock threshold management
      - Comprehensive inventory reporting

  - question: |
      Write a Python script that reads a CSV file, performs basic data analysis, 
      and creates a simple visualization.
    answer: |
      Here's a complete Python script for CSV analysis and visualization:

      ```python
      import pandas as pd
      import matplotlib.pyplot as plt
      import numpy as np
      from pathlib import Path
      import sys

      def analyze_csv(file_path: str, target_column: str = None):
          """
          Analyze a CSV file and create basic visualizations.
          
          Args:
              file_path (str): Path to the CSV file
              target_column (str): Column to focus analysis on
          """
          try:
              # Read the CSV file
              df = pd.read_csv(file_path)
              print(f"Successfully loaded {file_path}")
              print(f"Dataset shape: {df.shape}")
              
              # Basic information
              print("\n--- Dataset Info ---")
              print(df.info())
              
              print("\n--- First 5 rows ---")
              print(df.head())
              
              # Descriptive statistics
              print("\n--- Descriptive Statistics ---")
              print(df.describe())
              
              # Check for missing values
              missing_data = df.isnull().sum()
              if missing_data.any():
                  print("\n--- Missing Values ---")
                  print(missing_data[missing_data > 0])
              
              # Create visualizations
              create_visualizations(df, target_column)
              
          except FileNotFoundError:
              print(f"Error: File {file_path} not found")
          except Exception as e:
              print(f"Error analyzing file: {e}")

      def create_visualizations(df: pd.DataFrame, target_column: str = None):
          """Create basic visualizations for the dataset."""
          
          # Set up the plotting style
          plt.style.use('default')
          fig, axes = plt.subplots(2, 2, figsize=(15, 10))
          fig.suptitle('Dataset Analysis Dashboard', fontsize=16)
          
          # 1. Dataset shape and missing values
          ax1 = axes[0, 0]
          missing_counts = df.isnull().sum()
          if missing_counts.any():
              missing_counts[missing_counts > 0].plot(kind='bar', ax=ax1)
              ax1.set_title('Missing Values by Column')
              ax1.set_ylabel('Missing Count')
          else:
              ax1.text(0.5, 0.5, 'No Missing Values', 
                      ha='center', va='center', transform=ax1.transAxes)
              ax1.set_title('Missing Values Status')
          
          # 2. Correlation heatmap (for numeric columns)
          ax2 = axes[0, 1]
          numeric_cols = df.select_dtypes(include=[np.number]).columns
          if len(numeric_cols) > 1:
              corr_matrix = df[numeric_cols].corr()
              im = ax2.imshow(corr_matrix, cmap='coolwarm', aspect='auto')
              ax2.set_xticks(range(len(numeric_cols)))
              ax2.set_yticks(range(len(numeric_cols)))
              ax2.set_xticklabels(numeric_cols, rotation=45)
              ax2.set_yticklabels(numeric_cols)
              ax2.set_title('Correlation Matrix')
              plt.colorbar(im, ax=ax2)
          else:
              ax2.text(0.5, 0.5, 'Insufficient numeric\ncolumns for correlation', 
                      ha='center', va='center', transform=ax2.transAxes)
              ax2.set_title('Correlation Analysis')
          
          # 3. Distribution of target column or first numeric column
          ax3 = axes[1, 0]
          if target_column and target_column in df.columns:
              plot_column = target_column
          elif len(numeric_cols) > 0:
              plot_column = numeric_cols[0]
          else:
              plot_column = None
          
          if plot_column:
              df[plot_column].hist(bins=30, ax=ax3, alpha=0.7)
              ax3.set_title(f'Distribution of {plot_column}')
              ax3.set_xlabel(plot_column)
              ax3.set_ylabel('Frequency')
          else:
              ax3.text(0.5, 0.5, 'No numeric columns\nfor distribution plot', 
                      ha='center', va='center', transform=ax3.transAxes)
              ax3.set_title('Distribution Analysis')
          
          # 4. Data types overview
          ax4 = axes[1, 1]
          dtype_counts = df.dtypes.value_counts()
          dtype_counts.plot(kind='pie', ax=ax4, autopct='%1.1f%%')
          ax4.set_title('Data Types Distribution')
          ax4.set_ylabel('')
          
          plt.tight_layout()
          plt.show()
          
          # Save the plot
          output_file = 'data_analysis_dashboard.png'
          plt.savefig(output_file, dpi=300, bbox_inches='tight')
          print(f"\nVisualization saved as: {output_file}")

      def main():
          """Main function to run the analysis."""
          if len(sys.argv) < 2:
              print("Usage: python csv_analyzer.py <csv_file_path> [target_column]")
              print("Example: python csv_analyzer.py data.csv price")
              return
          
          file_path = sys.argv[1]
          target_column = sys.argv[2] if len(sys.argv) > 2 else None
          
          # Verify file exists
          if not Path(file_path).exists():
              print(f"Error: File {file_path} does not exist")
              return
          
          # Run analysis
          analyze_csv(file_path, target_column)

      if __name__ == "__main__":
          main()
      ```

      **To use this script:**

      1. Save as `csv_analyzer.py`
      2. Install required packages: `pip install pandas matplotlib numpy`
      3. Run: `python csv_analyzer.py your_data.csv [optional_target_column]`

      **Features:**
      - Loads and validates CSV files
      - Provides comprehensive dataset overview
      - Creates multiple visualizations in a dashboard
      - Handles missing data analysis
      - Saves visualizations as PNG files
      - Command-line interface for easy use

document_outline: |
  This skill teaches how to write effective Python code for real-world problems:
  1. Statistical analysis with outlier detection
  2. Object-oriented programming for inventory management
  3. Data analysis and visualization workflows
  4. Error handling and input validation
  5. Command-line script development
